-> create entities and relationships between them
-> create repositories
-> implement controller endpoints
-> security:
    -
    - implement UserDetails
    - implement UserDetailsService


====NEW LEARNINGS====
@JoinColumn -> Defines the foreign key column in the database. (Used on the owning side of a relationship)
mappedBy-> Used on the inverse (non-owning) side of the relationship,Tells JPA which field owns
the relationship.

@ManyToMany
    @JoinTable(
        name = "student_course", // name of the join table
        joinColumns = @JoinColumn(name = "student_id"), // FK to Student
        inverseJoinColumns = @JoinColumn(name = "course_id") // FK to Course
    )
 -> in reverse side:
        @ManyToMany(mappedBy = "courses")

@Column(nullable = false,columnDefinition ="TEXT")


package com.boussas.blog.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(HttpMethod.GET, "/api/posts/**").permitAll()
                        .requestMatchers(HttpMethod.GET, "/api/categories/**").permitAll()
                        .requestMatchers(HttpMethod.GET, "/api/tags/**").permitAll()
                        .anyRequest().authenticated()
                )
                .csrf(csrf -> csrf.disable())
                .sessionManagement(session ->
                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                );

        return http.build();
    }
}